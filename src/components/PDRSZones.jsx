import { useContext } from "react"
import { DroneMarkersContext } from "../context/dronemarkers.jsx"
import { PDRSZonesContext } from "../context/pdrszones.jsx"
import { Polygon, useMap } from "react-leaflet"
import { flight_geography_opts, contingency_volume_opts, ground_risk_buffer_opts } from "../constants/constants.js"
import { getPDRAdefinitions } from "../logic/droneOperationsRules.js"
import { computeRectangle } from "../logic/utils.js"
import { useFilters } from "../hooks/useFilters.js"
import { polygon, transformScale} from "@turf/turf"
import GeometryUtil from "leaflet-geometryutil"
import * as L from 'leaflet'

function useGetPDRAZones() {
    const geo_map = useMap()
    const { filters } = useFilters()
    const { fgVertex } = useContext(PDRSZonesContext) 
    const DroneRegulationDefinitions = getPDRAdefinitions(filters.droneHeight)
    
    let fg = structuredClone(fgVertex)

    /* Contingency Volume */
    let cv = fg.map(this_polygon=>{
        // Turf.js requires that a Polygon object has its last entry as the first one
        const closed_polygon = this_polygon
        closed_polygon.push(closed_polygon[0])
        const scalingFactorForContVol = 1 + DroneRegulationDefinitions.Scv/GeometryUtil.distance(geo_map, 
                                                                                                 L.latLng(closed_polygon[0][0], closed_polygon[0][1]),
                                                                                                 L.latLng(closed_polygon[1][0], closed_polygon[1][1]))
        let out = transformScale(polygon([closed_polygon]), scalingFactorForContVol)
        out = out.geometry.coordinates[0]
        return out.slice(0, out.length - 1)
    })

    /* Ground Risk Buffer */
    let grb = cv.map(this_polygon=>{    
        const closed_polygon = this_polygon
        closed_polygon.push(closed_polygon[0])
        const scalingFactorForGRB = 1 + DroneRegulationDefinitions.Sgrb/GeometryUtil.distance(geo_map, 
                                                                                              L.latLng(closed_polygon[0][0], closed_polygon[0][1]),
                                                                                              L.latLng(closed_polygon[1][0], closed_polygon[1][1]))
        let out = transformScale(polygon([closed_polygon]), scalingFactorForGRB)
        out = out.geometry.coordinates[0]
        return out.slice(0, out.length - 1)
    })        
    
    return { cv, grb }
}

export function RectangularAutoGeneratedFlightGeographyArea () {
    const { markers } = useContext(DroneMarkersContext)
    const { filters } = useFilters()
    const DroneRegulationDefinitions = getPDRAdefinitions(filters.droneHeight)
    const distBoundFlightGeography = DroneRegulationDefinitions.Scv
    console.log(filters)
    return (
        <>
        { 
            markers.map((entry, cnt) => {
                if (cnt < markers.length - 1) {
                    const thisCoords = L.latLng(entry.lat, entry.lng)
                    const nextCoords = L.latLng(markers[cnt+1].lat, markers[cnt+1].lng)
                    const {this_point_clockwise, this_point_counterclockwise, next_point_clockwise, next_point_counterclockwise} = computeRectangle(distBoundFlightGeography, thisCoords, nextCoords)
                    
                    const rect_vertex = [[this_point_clockwise.lat, this_point_clockwise.lng],
                                         [this_point_counterclockwise.lat, this_point_counterclockwise.lng],
                                         [next_point_counterclockwise.lat, next_point_counterclockwise.lng],
                                         [next_point_clockwise.lat, next_point_clockwise.lng]]
                    return (
                        <Polygon key={cnt} positions={rect_vertex} pathOptions={flight_geography_opts}></Polygon>
                    )
                }                
            })
        }
        </>
    )
}

export function FlightGeographyArea(){
    const { fgVertex } = useContext(PDRSZonesContext)
    return (
        <>
            {
                fgVertex.map((polygon, cnt)=>{
                    <Polygon key={cnt} positions={polygon} pathOptions={flight_geography_opts}></Polygon>
                })
            }
        </>
    )
}

export function ContingencyVolumeArea(){
    const { cv } = useGetPDRAZones()
    return (
        <>
            {
                cv.map((polygon,cnt)=>{
                    return (
                        <Polygon key={cnt} positions={polygon} pathOptions={contingency_volume_opts}></Polygon>
                    )
                })
            }
        </>
    )
}

export function GroundRiskBufferArea(){
    const { grb } = useGetPDRAZones()
    return (
        <>
            {
                grb.map((polygon,cnt)=>{
                    return (
                        <Polygon key={cnt} positions={polygon} pathOptions={ground_risk_buffer_opts}></Polygon>
                    )
                })
            }
        </>
    )
}

export function PDRAZones(){
    return (
        <>
            <FlightGeographyArea></FlightGeographyArea>
            <ContingencyVolumeArea></ContingencyVolumeArea>
            <GroundRiskBufferArea></GroundRiskBufferArea> 
        </>
    )
}